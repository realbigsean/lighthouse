name:   Build Release Suite

on:
    push:
        tags:
            - v*

env:
    REPO_NAME: realbigsean/lighthouse

jobs:
    extract-version:
        runs-on: ubuntu-latest
        steps:
            - name: Extract version
              run: echo "::set-output name=VERSION::$(echo ${GITHUB_REF#refs/tags/})"
              id: extract_version
        outputs:
            VERSION: ${{ steps.extract_version.outputs.VERSION }}

    build:
        name:   Build Release
        strategy:
            matrix:
                arch: [aarch64-unknown-linux-gnu,
                       aarch64-unknown-linux-gnu-portable,
                       x86_64-unknown-linux-gnu,
                       x86_64-unknown-linux-gnu-portable,
                       x86_64-apple-darwin,
                       x86_64-apple-darwin-portable]
                include:
                    -   arch: [aarch64-unknown-linux-gnu,
                            aarch64-unknown-linux-gnu-portable,
                            x86_64-unknown-linux-gnu,
                            x86_64-unknown-linux-gnu-portable]
                        platform: ubuntu-latest
                    -   arch: [x86_64-apple-darwin,
                            x86_64-apple-darwin-portable]
                        platform: macos-latest

        runs-on:    ${{ matrix.platform }}
        needs: extract-version
        steps:
            - name: Checkout sources
              uses: actions/checkout@v2
            - name: Install toolchain
              uses: actions-rs/toolchain@v1
              with:
                  toolchain: stable
                  # This uses the minimal supported version of rust
                  profile:  minimal
                  override: true
            - name: Cache cargo
              uses: actions/cache@v2
              with:
                  path: |
                      ~/.cargo/registry
                      ~/cargo/git
                      target
                  key:  ${{ matrix.arch }}-cargo-${{ hashFiles('**/Cargo.lock') }}


            # ==============================
            #       Builds
            # ==============================

            - name: Build Lighthouse for ${{matrix.arch}}
              if:   startsWith(matrix.arch, 'aarch64') && endsWith(matrix.arch, 'portable')
              uses: actions-rs/cargo@v1
              with:
                  use-cross: true
                  command: build
                  args: --release --manifest-path lighthouse/Cargo.toml --target aarch64-unknown-linux-gnu --features portable

            - name: Build Lighthouse for ${{matrix.arch}}
              if:   startsWith(matrix.arch, 'aarch64') && !endsWith(matrix.arch, 'portable')
              uses: actions-rs/cargo@v1
              with:
                  use-cross: true
                  command: build
                  args: --release --manifest-path lighthouse/Cargo.toml --target aarch64-unknown-linux-gnu

            - name: Move cross-compiled binary
              if:  startsWith(matrix.arch, 'aarch64')
              run: mv target/aarch64-unknown-linux-gnu/release ~/.cargo/bin/lighthouse

            - name: Build Lighthouse for ${{matrix.arch}}
              if:   startsWith(matrix.arch, 'x86_64')
              env:
                  PORTABLE: ${{ endsWith(matrix.arch, 'portable') }}
              run:  make

            - name: Configure GPG
              env:
                  GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY }}
                  GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
              run: |
                  mkdir -p ~/.gnupg/
                  echo "$GPG_SIGNING_KEY" > ~/.gnupg/private.asc
                  gpg --import ~/.gnupg/private.asc

            - name: Create artifacts
              run: |
                  tar -czf lighthouse-${{ needs.extract-version.outputs.VERSION }}-${{ matrix.arch }}.tar.gz \
                  ~/.cargo/bin/lighthouse;
                  echo "$GPG_PASSPHRASE" | gpg --clearsign

            # =======================================================================
            # Upload artifacts
            # This is required to share artifacts between different jobs
            # =======================================================================

            - name:                   Upload artifact
              uses:                   actions/upload-artifact@v2
              with:
                  name:                 lighthouse-${{ needs.extract-version.outputs.VERSION }}-${{ matrix.arch }}.tar.gz
                  path:                 lighthouse-${{ needs.extract-version.outputs.VERSION }}-${{ matrix.arch }}.tar.gz

            - name:                   Upload signature
              uses:                   actions/upload-artifact@v2
              with:
                  name:                 lighthouse-${{ needs.extract-version.outputs.VERSION }}-${{ matrix.arch }}.tar.gz.asc
                  path:                 lighthouse-${{ needs.extract-version.outputs.VERSION }}-${{ matrix.arch }}.tar.gz.asc

            # ==============================
            #       Prepare cache
            # ==============================

            - name: Prepare build directory for cache
              # can try to find specifics here
              # rm -fr ./target/release/{deps,.fingerprint}/
              # ~/lighthouse/target/aarch64-unknown-linux-gnu/release
              # cache cross installation?
              run:  |
                find ./target/release -maxdepth 1 -type f -delete;
                rm -f  ./target/.rustc_info.json;
                rm -rf ~/.cargo/registry/index/;

    draft-release:
        name:   Draft Release
        needs:  [zip-artifacts-creator, extract-version]
        runs-on: ubuntu-latest
        steps:
            # ==============================
            #       Download artifacts
            # ==============================

            - name: Download artifacts
              uses: actions/download-artifact@v2
              path: .

            - name: check downloaded
              run: ls

            - name: unzip all
              run: |
                for filename in *.zip; do unzip ${filename}; done

            # ==============================
            #       Create release draft
            # ==============================

            - name: Create Release Draft
              id:   create_release_draft
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
                  VERSION:  ${{ needs.extract-version.outputs.VERSION }}
              with:
                  tag_name: ${{ needs.extract-version.outputs.VERSION }}
                  release_name: <Insert Rick and Morty character> ${{ needs.extract-version.outputs.VERSION }}
                  body: |
                      This release contains <ADD_TEXT>

                      | System | Architecture | Binary | PGP Signature |
                      |:---:|:---:|:---:|:---|
                      | <img src="https://simpleicons.org/icons/apple.svg" style="width: 32px;"/> | x64 | [lighthouse-${{ env.VERSION }}-x86_64-apple-darwin.tar.gz](https://github.com/${{ env.REPO_NAME }}/releases/download/${{ env.VERSION }}/lighthouse-${{ env.VERSION }}-x86_64-apple-darwin.tar.gz) | [PGP Signature](https://github.com/${{ env.REPO_NAME }}/releases/download/lighthouse-${{ env.VERSION }}-x86_64-apple-darwin.tar.gz.asc) |
                      | <img src="https://simpleicons.org/icons/apple.svg" style="width: 32px;"/> | x64 | [lighthouse-${{ env.VERSION }}-x86_64-apple-darwin-portable.tar.gz](https://github.com/${{ env.REPO_NAME }}/releases/download/${{ env.VERSION }}/lighthouse-${{ env.VERSION }}-x86_64-apple-darwin-portable.tar.gz) | [PGP Signature](https://github.com/${{ env.REPO_NAME }}/releases/download/lighthouse-${{ env.VERSION }}-x86_64-apple-darwin-portable.tar.gz.asc) |
                      | <img src="https://simpleicons.org/icons/linux.svg" style="width: 32px;"/> | x64 | [lighthouse-${{ env.VERSION }}-x86_64-unknown-linux-gnu.tar.gz](https://github.com/${{ env.REPO_NAME }}/releases/download/${{ env.VERSION }}/lighthouse-${{ env.VERSION }}-x86_64-unknown-linux-gnu.tar.gz) | [PGP Signature](https://github.com/${{ env.REPO_NAME }}/releases/download/lighthouse-${{ env.VERSION }}-x86_64-unknown-linux-gnu.tar.gz.asc) |
                      | <img src="https://simpleicons.org/icons/linux.svg" style="width: 32px;"/> | x64 | [lighthouse-${{ env.VERSION }}-x86_64-unknown-linux-gnu-portable.tar.gz](https://github.com/${{ env.REPO_NAME }}/releases/download/${{ env.VERSION }}/lighthouse-${{ env.VERSION }}-x86_64-unknown-linux-gnu-portable.tar.gz) | [PGP Signature](https://github.com/${{ env.REPO_NAME }}/releases/download/lighthouse-${{ env.VERSION }}-x86_64-unknown-linux-gnu-portable.tar.gz.asc) |
                      | <img src="https://simpleicons.org/icons/raspberrypi.svg" style="width: 32px;"/> | x64 | [lighthouse-${{ env.VERSION }}-aarch64-unknown-linux-gnu.tar.gz](https://github.com/${{ env.REPO_NAME }}/releases/download/${{ env.VERSION }}/lighthouse-${{ env.VERSION }}-aarch64-unknown-linux-gnu.tar.gz) | [PGP Signature](https://github.com/${{ env.REPO_NAME }}/releases/download/lighthouse-${{ env.VERSION }}-aarch64-unknown-linux-gnu.tar.gz.asc) |
                      | <img src="https://simpleicons.org/icons/raspberrypi.svg" style="width: 32px;"/> | x64 | [lighthouse-${{ env.VERSION }}-aarch64-unknown-linux-gnu-portable.tar.gz](https://github.com/${{ env.REPO_NAME }}/releases/download/${{ env.VERSION }}/lighthouse-${{ env.VERSION }}-aarch64-unknown-linux-gnu-portable.tar.gz) | [PGP Signature](https://github.com/${{ env.REPO_NAME }}/releases/download/lighthouse-${{ env.VERSION }}-aarch64-unknown-linux-gnu-portable.tar.gz.asc) |
                      | | | | |
                      | **System** | **Option** | - | **Resource** |
                      | <img src="https://simpleicons.org/icons/docker.svg" style="width: 32px;"/> | Docker | - | TODO |

                      PGP public Key: `A6F82EEC40377219F34CD38146DA9C537C6B40ED`

                  draft:    true
                  prerelease:   true

                  # Really dumb but seems like you have to do these in seperate steps

            - name: Upload Release Asset - MacOS
              id:   upload_release_asset_macos
              uses: actions/upload-release-asset@v1.0.1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url:   ${{ steps.create_release_draft.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
                  asset_path:   ./lighthouse-${{ env.VERSION }}-x86_64-apple-darwin.tar.gz
                  asset_name:   lighthouse-${{ env.VERSION }}-x86_64-apple-darwin.tar.gz
                  asset_content_type:   application/gzip

            - name: Upload Release Asset - MacOS portable
              id:   upload_release_asset_macos_portable
              uses: actions/upload-release-asset@v1.0.1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url:   ${{ steps.create_release_draft.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
                  asset_path:   ./lighthouse-${{ env.VERSION }}-x86_64-apple-darwin-portable.tar.gz
                  asset_name:   lighthouse-${{ env.VERSION }}-x86_64-apple-darwin-portable.tar.gz
                  asset_content_type:   application/gzip

            - name: Upload Release Asset - Linux
              id:   upload_release_asset_linux
              uses: actions/upload-release-asset@v1.0.1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url:   ${{ steps.create_release_draft.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
                  asset_path:   ./lighthouse-${{ env.VERSION }}-x86_64-unknown-linux-gnu.tar.gz
                  asset_name:   lighthouse-${{ env.VERSION }}-x86_64-unknown-linux-gnu.tar.gz
                  asset_content_type:   application/gzip

            - name: Upload Release Asset - Linux portable
              id:   upload_release_asset_linux_portable
              uses: actions/upload-release-asset@v1.0.1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url:   ${{ steps.create_release_draft.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
                  asset_path:   ./lighthouse-${{ env.VERSION }}-x86_64-unknown-linux-gnu-portable.tar.gz
                  asset_name:   lighthouse-${{ env.VERSION }}-x86_64-unknown-linux-gnu-portable.tar.gz
                  asset_content_type:   application/gzip

            - name: Upload Release Asset - Linux aarch64
              id:   upload_release_asset_linux_aarch64
              uses: actions/upload-release-asset@v1.0.1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url:   ${{ steps.create_release_draft.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
                  asset_path:   ./lighthouse-${{ env.VERSION }}-aarch64-unknown-linux-gnu.tar.gz
                  asset_name:   lighthouse-${{ env.VERSION }}-aarch64-unknown-linux-gnu.tar.gz
                  asset_content_type:   application/gzip

            - name: Upload Release Asset - Linux aarch64 portable
              id:   upload_release_asset_linux_aarch64_portable
              uses: actions/upload-release-asset@v1.0.1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url:   ${{ steps.create_release_draft.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
                  asset_path:   ./lighthouse-${{ env.VERSION }}-aarch64-unknown-linux-gnu-portable.tar.gz
                  asset_name:   lighthouse-${{ env.VERSION }}-aarch64-unknown-linux-gnu-portable.tar.gz
                  asset_content_type:   application/gzip

# Sigs

            - name: Upload Release Asset - MacOS PGP signature
              id:   upload_release_asset_macos_sig
              uses: actions/upload-release-asset@v1.0.1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url:   ${{ steps.create_release_draft.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
                  asset_path:   ./lighthouse-${{ env.VERSION }}-x86_64-apple-darwin.tar.gz.asc
                  asset_name:   lighthouse-${{ env.VERSION }}-x86_64-apple-darwin.tar.gz.asc
                  asset_content_type:   text/plain

            - name: Upload Release Asset - MacOS portable PGP signature
              id:   upload_release_asset_macos_portable_sig
              uses: actions/upload-release-asset@v1.0.1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url:   ${{ steps.create_release_draft.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
                  asset_path:   ./lighthouse-${{ env.VERSION }}-x86_64-apple-darwin-portable.tar.gz.asc
                  asset_name:   lighthouse-${{ env.VERSION }}-x86_64-apple-darwin-portable.tar.gz.asc
                  asset_content_type:   text/plain

            - name: Upload Release Asset - Linux PGP signature
              id:   upload_release_asset_linux_sig
              uses: actions/upload-release-asset@v1.0.1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url:   ${{ steps.create_release_draft.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
                  asset_path:   ./lighthouse-${{ env.VERSION }}-x86_64-unknown-linux-gnu.tar.gz.asc
                  asset_name:   lighthouse-${{ env.VERSION }}-x86_64-unknown-linux-gnu.tar.gz.asc
                  asset_content_type:   text/plain

            - name: Upload Release Asset - Linux portable PGP signature
              id:   upload_release_asset_linux_portable_sig
              uses: actions/upload-release-asset@v1.0.1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url:   ${{ steps.create_release_draft.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
                  asset_path:   ./lighthouse-${{ env.VERSION }}-x86_64-unknown-linux-gnu-portable.tar.gz.asc
                  asset_name:   lighthouse-${{ env.VERSION }}-x86_64-unknown-linux-gnu-portable.tar.gz.asc
                  asset_content_type:   text/plain

            - name: Upload Release Asset - Linux aarch64 PGP signature
              id:   upload_release_asset_linux_aarch64_sig
              uses: actions/upload-release-asset@v1.0.1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url:   ${{ steps.create_release_draft.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
                  asset_path:   ./lighthouse-${{ env.VERSION }}-aarch64-unknown-linux-gnu.tar.gz.asc
                  asset_name:   lighthouse-${{ env.VERSION }}-aarch64-unknown-linux-gnu.tar.gz.asc
                  asset_content_type:   text/plain

            - name: Upload Release Asset - Linux aarch64 portable PGP signature
              id:   upload_release_asset_linux_aarch64_portable_sig
              uses: actions/upload-release-asset@v1.0.1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url:   ${{ steps.create_release_draft.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
                  asset_path:   ./lighthouse-${{ env.VERSION }}-aarch64-unknown-linux-gnu-portable.tar.gz.asc
                  asset_name:   lighthouse-${{ env.VERSION }}-aarch64-unknown-linux-gnu-portable.tar.gz.asc
                  asset_content_type:   text/plain
